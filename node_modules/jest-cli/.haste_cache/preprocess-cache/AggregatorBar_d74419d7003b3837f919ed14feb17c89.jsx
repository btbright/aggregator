'use strict';var React = require('react');
var _ = require('lodash');
var AggregatorBarText = require('./AggregatorBarText.jsx');
var cx = require('classnames');

var AggregatorBar = React.createClass({ displayName: 'AggregatorBar', 
	propTypes: { 
		rightText: React.PropTypes.string, 
		leftText: React.PropTypes.string, 
		barValue: React.PropTypes.number.isRequired, 
		residueValue: React.PropTypes.number, 
		residueColorClass: React.PropTypes.string }, 

	getInitialState: function getInitialState() {
		return { 
			flashes: [] };}, 


	flash: function flash() {
		var that = this;
		this.setState(function (previousState) {
			previousState.flashes.push("flash:" + Date.now());
			return { 
				flashes: previousState.flashes };});


		setTimeout(function () {
			that.setState({ 
				flashes: _.rest(that.state.flashes) //get array except oldest
			});}, 
		300);}, 

	render: function render() {
		var width = this.props.barValue;

		//add optional text
		var rightText;
		if (this.props.rightText) {
			rightText = React.createElement(AggregatorBarText, { key: 'rightText', text: this.props.rightText, position: 'right' });}

		var leftText;
		if (this.props.leftText) {
			leftText = React.createElement(AggregatorBarText, { key: 'leftText', text: this.props.leftText, position: 'left' });}


		//add optional residue marker
		var residue;
		if (this.props.residue && this.props.residueColorClass) {
			var classes = cx('bar-residue', this.props.residueColorClass);
			residue = React.createElement('div', { className: classes, style: { width: this.props.residue + '%' } });}


		//determine wrap class names
		var colorClass = false;
		if (this.props.barColor) {
			colorClass = this.props.barColor;}

		var barWrapClasses = cx('bar-wrap', colorClass, 
		{ 
			'bar-almost-full': this.props.barValue > 90 });


		return (
			React.createElement('div', { className: 'bar' }, 
			React.createElement('div', { className: barWrapClasses }, 
			this.state.flashes.map(function (flashKey) {
				return React.createElement('div', { key: flashKey, style: { width: width + '%', right: width + '%' }, className: 'bar-leader' });}), 

			residue, 
			React.createElement('div', { className: 'bar-inner', style: { width: width + '%' } }), 
			rightText, 
			leftText)));} });






module.exports = AggregatorBar;